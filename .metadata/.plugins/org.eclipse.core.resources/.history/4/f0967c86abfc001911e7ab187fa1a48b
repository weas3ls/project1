package com.revature.dao;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;
import com.revature.models.Reimbursement;
import com.revature.models.User;
import com.revature.util.*;

public class ReimbursementDao {
	Connection conn;
	
	
	// Creates a connection to the database.
	public void setConnection(Connection conn) {
		try {
			if (this.conn != null && !this.conn.isClosed()) {
				System.out.println("Closing connection");
				this.conn.close();
			}
			this.conn = conn;
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	// Establishes connection to database upon instantiation of UserDao object.
	public ReimbursementDao() {
		this.conn = ConnectionUtil.getConnection();
	}
	
	/*
	 * Required: None
	 * Modifies: None
	 * Effects: Returns a list of type User by converting all entries 
	 * 
	 */
	public List<Reimbursement> getAllReimbursements() {
		try (Connection conn = ConnectionUtil.getConnection()) {
			List<Reimbursement> users = new ArrayList<>();
			String sql = "SELECT * FROM ers_users";
			PreparedStatement statement = conn.prepareStatement(sql);
			ResultSet rs = statement.executeQuery();
			
			while (rs.next()) {
				users.add(extractUser(rs));
			}
			
			return users;

		} catch (SQLException e) {
			e.printStackTrace();
			System.out.println("SQLException in UserDao.getAllUsers()");
			return null;
		}
		
		
	}
	
	
	
	/*
	 * REQUIRED: valid ResultSet
	 * MODIFIES: None
	 * EFFECTS: Extracts from result set state in ers_users table and returns a User object with same state
	 * 
	 * 
	 * Columns in ers_reimbursement
	 * reimb_id, reimb_amount, reimb_submitted,	reimb_resolved,	reimb_description, reimb_receipt, reimb_author,	reimb_resolver,	reimb_status_id, reimb_type_id
	 * 
	 */
	private Reimbursement extractReimbursement(ResultSet rs) throws SQLException {
		Integer id = rs.getInt("reimb_id");
		BigDecimal amount = rs.getBigDecimal("reimb_amount");
		int authorId = rs.getInt("reimb_author");
		int resolverId = rs.getInt("reimb_resolver");
		int statusId = rs.getInt("reimb_status_id");
		int typeId = rs.getInt("reimb_type_id");
		
		
	}
}
